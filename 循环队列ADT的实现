///循环队列ADT的基本实现
#include <iostream>
#include <bits/stdc++.h>


using namespace std;

class SeqQueue:public queue<int>
{
public:
    int *elements;
    int Front,rear;
    int maxSize;
    SeqQueue(int sz=10)
    {
       maxSize=sz;
       Front=rear=0;
    }
    ~SeqQueue()
    {
        delete []elements;
    }
    bool EnQueue(int x);
    bool DeQueue();
    bool getFront();
    int getSize(){return (rear-Front+maxSize)%maxSize;}
    bool isFull(){return ((rear+1)%maxSize==Front)?true:false;}
    bool isEmpty(){return (rear==Front)?true:false;}
};
bool SeqQueue::DeQueue()
{
    if(isEmpty()==true)
        return false;
     int x= elements[Front];
    Front=(Front+1)%maxSize;
    return true;
}
bool SeqQueue::EnQueue(int x)
{
    if(isFull()==true)
        return false;
    elements[rear]=x;
    rear=(rear+1)%maxSize;
    return true;
}
bool SeqQueue::getFront()
{
  if(isEmpty()==true)
  return false;
  int x=elements[Front];
  cout<<"队首元素为"<<x<<endl;
  return true;
}

int main()
{
    SeqQueue lq;
    for(int i=1;i<=10;i++){
        lq.EnQueue(i);
    }
    lq.getFront();
    int sz = lq.getSize();
    cout<<"队列大小:"<<sz<<endl;
    lq.DeQueue();
    lq.getFront();
    sz = lq.getSize();
    cout<<"队列大小:"<<sz<<endl;
    return 0;

}


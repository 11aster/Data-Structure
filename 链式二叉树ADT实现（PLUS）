///链式二叉树ADT的简单实现
#include <iostream>
#include <bits/stdc++.h>

using namespace std;
struct BinTreeNode
{
public:
    BinTreeNode *leftchild,*rightchild;
    char data;
    BinTreeNode(){leftchild=NULL;rightchild=NULL;}
    BinTreeNode(char x,BinTreeNode*left=NULL,BinTreeNode*right=NULL):data(x),leftchild(left),rightchild(right)
    {}
    ~BinTreeNode(){}
};
int cnt=0;

class BinaryTree{
public:
    BinTreeNode*root;
    BinaryTree(){root=new BinTreeNode();}
    void CreateBinTree(BinTreeNode *&subtree);//根据完全前序序列创建二叉树
    BinTreeNode* Create(char *VLR,char *LVR,int n);//根据前序和中序序列创建二叉树
    void preOrder(BinTreeNode *subtree);//前序遍历
    void inOrder(BinTreeNode *subtree);//中序遍历
    void postOrder(BinTreeNode *subtree);//后序遍历
    void LevelOrder(BinTreeNode *subtree);//广度遍历
    int Depth(BinTreeNode *subtree);//求指定元素的深度/高度
    int Size(BinTreeNode *subtree);//求结点的总个数
    int Leaves(BinTreeNode *subtree);//求叶子结点的个数
    void Count(BinTreeNode *subtree,char x);//查找x的结点个数
    void Print(BinTreeNode*subtree,int l);//缩格文本打印

};

///在这里就直接用root
void BinaryTree::CreateBinTree(BinTreeNode *&root)
{
 char item;
 cin>>item;
 if(item!='#')//递归终止的条件
 {
     root=new BinTreeNode(item);
     if(root==NULL){cout<<"存储分配错误"<<endl;exit(1);}
     CreateBinTree(root->leftchild);
     CreateBinTree(root->rightchild);
 }
 else
    root=NULL;
}

BinTreeNode* BinaryTree::Create(char *VLR,char *LVR,int n)
{
    if(n==0)
        return NULL;
        int k=0;
        while(VLR[0]==LVR[k])  //寻找根
            k++;
        //创建根结点
        BinTreeNode *t= new BinTreeNode;
        t->data=VLR[0];
        t->leftchild=Create(VLR+1,LVR,k);
        //从前序VLR+1对中序0-k-1的k个左子序列建立左子树
        t->rightchild=Create(VLR+1+k,LVR+k+1,n-k-1);
         //从前序VLR+k+1对中序k+1-n-1的n-k-1个左子序列建立左子树
        return t;

}
void BinaryTree::preOrder(BinTreeNode *subtree)
{
    if(subtree!=NULL)
    {
        cout<<subtree->data;
        preOrder(subtree->leftchild);
        preOrder(subtree->rightchild);
    }
    else
        return;
}
void BinaryTree::inOrder(BinTreeNode *subtree)
{
    if(subtree!=NULL)
    {
        inOrder(subtree->leftchild);
        cout<<subtree->data;
        inOrder(subtree->rightchild);
    }
    else
        return ;

}
void BinaryTree::postOrder(BinTreeNode *subtree)
{
    if(subtree!=NULL)
    {
        postOrder(subtree->leftchild);
        postOrder(subtree->rightchild);
        cout<<subtree->data;
    }
    else
        return;
}
void BinaryTree::LevelOrder(BinTreeNode *subtree)
{
  if(subtree==NULL)
    return;
    queue<BinTreeNode*>Q;
    BinTreeNode *t=subtree;
    Q.push(t);
    while(!Q.empty())
    {
        t=Q.front();
        cout<<t->data;
        Q.pop();
        if(t->leftchild!=NULL)
        Q.push(t->leftchild);
        if(t->rightchild!=NULL)
        Q.push(t->rightchild);
    }
}
int BinaryTree::Depth(BinTreeNode *subtree)
{
    if(subtree==NULL)
        return 0;
    else
    {
        int a=Depth(subtree->leftchild);
        int b=Depth(subtree->rightchild);
        return (a>=b)?a+1:b+1;
    }

}
int BinaryTree::Size(BinTreeNode *subtree)
{
 if(subtree==NULL)
        return 0;

else
    return 1+Size(subtree->leftchild)+Size(subtree->rightchild);
}


int BinaryTree::Leaves(BinTreeNode *subtree)
{
 if(subtree==NULL) return 0;
    else if(subtree->leftchild==NULL&&subtree->rightchild==NULL)
    return 1;
    else return (Leaves(subtree->leftchild)+Leaves(subtree->rightchild));

}
void BinaryTree::Count(BinTreeNode *subtree,char x)
{
    if(subtree==NULL)
        return ;
    queue<BinTreeNode*>Q;
    BinTreeNode *t=subtree;
    Q.push(t);
    while(!Q.empty())
    {
        t=Q.front();
       if(t->data==x) cnt++;//操作在弹出前做
        Q.pop();
        if(t->leftchild!=NULL)
        Q.push(t->leftchild);
        if(t->rightchild!=NULL)
        Q.push(t->rightchild);
    }

}
void BinaryTree::Print(BinTreeNode*subtree,int l)
{
    if(subtree==NULL)
        return ;
    for(int i=0;i<l-1;i++)
    cout<<" ";
    cout<<subtree->data<<endl;
    Print(subtree->leftchild,l+1);
    Print(subtree->rightchild,l+1);

}

int main()
{

char option;
    BinaryTree Tree;
    int l=1;
    while(1)
    {
        cin>>option;
        switch (option)
        {
            case 'C':
                char way;
                cin>>way;
                if(way=='1')
                {
                    Tree.CreateBinTree(Tree.root);
                    cout<<"Created success!"<<endl;
                }
                else
                {
                    int n;
                    char pre[100],in[100];
                    cin>>n;
                    cin>>pre;
                    cin>>in;
                    Tree.root=Tree.Create(pre,in,n);
                    cout<<"Created success!"<<endl;
                }
                break;
            case 'H':
                cout<<"Height="<<Tree.Depth(Tree.root)<<endl;
                break;
            case 'L':
                cout<<"Leaves="<<Tree.Leaves(Tree.root)<<endl;
                break;
            case 'N':
                cout<<"Nodes="<<Tree.Size(Tree.root)<<endl;
                break;
            case '1':
                cout<<"Preorder is:";
                Tree.preOrder(Tree.root);
                cout<<'.'<<endl;
                break;
            case '2':
                cout<<"Inorder is:";
                 Tree.inOrder(Tree.root);
                cout<<'.'<<endl;
                break;
            case '3':
                cout<<"Postorder is:";
                Tree.postOrder(Tree.root);
                cout<<'.'<<endl;
                break;
            case '4':
                cout<<"BFSorder is:";
                Tree.LevelOrder(Tree.root);
                cout<<'.'<<endl;
                break;
            case 'F':
                char x;
                cin>>x;
                Tree.Count(Tree.root,x);
                cout<<"The count of "<<x<<" is "<<cnt<<endl;
                break;
            case 'P':
                cout<<"The tree is:"<<endl;
                Tree.Print(Tree.root,l);
                break;
            case 'X':
                return 0;
        }
    }
    return 0;
}

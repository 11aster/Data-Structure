 
#include <iostream>
#include <stdlib.h>
using namespace std;
//数据元素类型
typedef char ElemType;
//二叉树结点定义
typedef struct TreeNode
{	ElemType data;
	struct TreeNode *lson, *rson;
} TreeNode;
//二叉树类
class BinaryTree
{  private:
	TreeNode *root;
   public:
	BinaryTree() { root = NULL; };
	~BinaryTree() { MakeEmpty(root); }
	void MakeEmpty(TreeNode *t);
	void create( ) { root = cp_create(root); };  //完全前序建立二叉树，空指针用@表示
	TreeNode *cp_create(TreeNode *t);
	
	//******  要补充的函数height ********
	int height(TreeNode *t) ;    //求二叉树的高度

	void output() { Pro_height(root); };
	//******  要补充的函数 Pro_height **********
	void Pro_height(TreeNode *t);  // 前序顺序输出各个元素结点为根的子树的高度      
};
//二叉树置空
void BinaryTree::MakeEmpty(TreeNode *t)
{	if (t != NULL)
	{	MakeEmpty(t->lson);
		MakeEmpty(t->rson);
		delete t;
	}
}
//完全前序序列创建二叉树，空指针用@表示
TreeNode *BinaryTree::cp_create(TreeNode *t)
{	ElemType v;
	cin >> v;
	if (v != '@')
	{	t = new TreeNode;
		t->data = v;
		t->lson = cp_create(t->lson);
		t->rson = cp_create(t->rson);
	}
	else t = NULL;
	return t;
}
//********************  需要补充写出的两个函数  ****************************
int BinaryTree::height(TreeNode *t)
{
    if(t==NULL)
        return 0;
    else
    {
        int a=height(t->lson);
        int b=height(t->rson);
        return (a>=b)?a+1:b+1;
    }
}
void BinaryTree::Pro_height(TreeNode *t)
{
    if(t==NULL)
        return;
        cout<<"Height("<<t->data<<")="<<height(t)<<endl;
        Pro_height(t->lson);
        Pro_height(t->rson);

}
//*******************************************************************************
//主函数
int main()
{	BinaryTree t;
	t.create();
	t.output();	
	return 0;
}
